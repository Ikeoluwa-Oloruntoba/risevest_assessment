// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  uuid              String            @unique @default(uuid())
  fullname      String
  email     String   @unique
  password  String
  status            Boolean           @default(true)
  posts             Post[]
  tokens            UserAccessToken[]
  comments          Comment[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt()
}

model Post {
  id        Int       @id @default(autoincrement())
  uuid              String            @unique @default(uuid())
  title     String
  content   String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  comments  Comment[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt()
}

model Comment {
  id        Int       @id @default(autoincrement())
  uuid              String            @unique @default(uuid())
  content   String
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt()
}

model UserAccessToken {
  id          Int      @id @default(autoincrement())
  uuid              String            @unique @default(uuid())
  accessToken String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime @default(now())
  revoked     Boolean  @default(false)
}
